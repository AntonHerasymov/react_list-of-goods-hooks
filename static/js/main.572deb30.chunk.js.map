{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortField","goodsFromServer","App","useState","DEFAULT","sortField","setSortField","isReversed","setIsReversed","visibleGoods","goods","preparedGoods","ALPHABETICALLY","sort","item1","item2","localeCompare","LENGTH","length","reverse","getPreparedGood","isVisibleReset","className","type","cn","onClick","map","item","ReactDOM","render","document","getElementById"],"mappings":"6KAmBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,K,WAAAA,E,gCAAAA,E,iBAAAA,M,KAwCE,IAAME,EAAM,WACjB,MAAkCC,mBAASH,EAAUI,SAArD,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAoCH,oBAAS,GAA7C,mBAAOI,EAAP,KAAmBC,EAAnB,KACMC,EAhCR,SACEC,EADF,GAMG,IAHCL,EAGF,EAHEA,UACAE,EAEF,EAFEA,WAGII,EAAa,YAAOD,GAE1B,GAAIL,EACF,OAAQA,GACN,KAAKL,EAAUY,eACbD,EAAcE,MAAK,SAACC,EAAOC,GAAR,OAAkBD,EAAME,cAAcD,MACzD,MACF,KAAKf,EAAUiB,OACbN,EAAcE,MAAK,SAACC,EAAOC,GAAR,OAAkBD,EAAMI,OAASH,EAAMG,UAC1D,MACF,QACE,OAAOP,EAQb,OAJIJ,GACFI,EAAcQ,UAGTR,EAMcS,CAAgBnB,EACnC,CAAEI,YAAWE,eAETc,EAAiBd,GAAcF,EAOrC,OACE,sBAAKiB,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IACT,iBACA,CACE,WAAYnB,IAAcL,EAAUY,iBAGxCa,QAAS,kBAAMnB,EAAaN,EAAUY,iBARxC,iCAaA,wBACEW,KAAK,SACLD,UAAWE,IACT,oBACA,CACE,WAAYnB,IAAcL,EAAUiB,SAGxCQ,QAAS,kBAAMnB,EAAaN,EAAUiB,SARxC,4BAaA,wBACEM,KAAK,SACLD,UAAWE,IACT,oBACA,CACE,YAAajB,IAGjBkB,QAAS,kBAAMjB,GAAeD,IARhC,qBAaCc,GACC,wBACEE,KAAK,SACLD,UAAU,4BACVG,QAAS,WAlDjBjB,GAAc,GACdF,EAAaN,EAAUI,UA8CjB,sBAaJ,6BACGK,EAAaiB,KAAI,SAAAC,GAAI,OACpB,oBAAe,UAAQ,OAAvB,SAA+BA,GAAtBA,YC/HnBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.572deb30.chunk.js","sourcesContent":["import { useState } from 'react';\nimport cn from 'classnames';\n\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortField {\n  DEFAULT = '',\n  ALPHABETICALLY = 'alphabetically',\n  LENGTH = 'length',\n}\n\ninterface ISort {\n  sortField: SortField;\n  isReversed: boolean;\n}\n\nfunction getPreparedGood(\n  goods: string[],\n  {\n    sortField,\n    isReversed,\n  }: ISort,\n) {\n  const preparedGoods = [...goods];\n\n  if (sortField) {\n    switch (sortField) {\n      case SortField.ALPHABETICALLY:\n        preparedGoods.sort((item1, item2) => item1.localeCompare(item2));\n        break;\n      case SortField.LENGTH:\n        preparedGoods.sort((item1, item2) => item1.length - item2.length);\n        break;\n      default:\n        return preparedGoods;\n    }\n  }\n\n  if (isReversed) {\n    preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n}\n\nexport const App = () => {\n  const [sortField, setSortField] = useState(SortField.DEFAULT);\n  const [isReversed, setIsReversed] = useState(false);\n  const visibleGoods = getPreparedGood(goodsFromServer,\n    { sortField, isReversed });\n\n  const isVisibleReset = isReversed || sortField;\n\n  const onResetClicked = () => {\n    setIsReversed(false);\n    setSortField(SortField.DEFAULT);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={cn(\n            'button is-info',\n            {\n              'is-light': sortField !== SortField.ALPHABETICALLY,\n            },\n          )}\n          onClick={() => setSortField(SortField.ALPHABETICALLY)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn(\n            'button is-success',\n            {\n              'is-light': sortField !== SortField.LENGTH,\n            },\n          )}\n          onClick={() => setSortField(SortField.LENGTH)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn(\n            'button is-warning',\n            {\n              'is-light': !isReversed,\n            },\n          )}\n          onClick={() => setIsReversed(!isReversed)}\n        >\n          Reverse\n        </button>\n\n        {isVisibleReset && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={() => {\n              onResetClicked();\n            }}\n          >\n            Reset\n          </button>\n        )}\n\n      </div>\n\n      <ul>\n        {visibleGoods.map(item => (\n          <li key={item} data-cy=\"Good\">{item}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}